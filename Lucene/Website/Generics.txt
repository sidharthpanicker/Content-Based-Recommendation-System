A browser with JavaScript enabled is required for this page to operate properly. Documentation The Java™ Tutorials Hide TOC Generics (Updated) Why Use Generics? Generic Types Raw Types Generic Methods Bounded Type Parameters Generic Methods and Bounded Type Parameters Generics, Inheritance, and Subtypes Type Inference Wildcards Upper Bounded Wildcards Unbounded Wildcards Lower Bounded Wildcards Wildcards and Subtyping Wildcard Capture and Helper Methods Guidelines for Wildcard Use Type Erasure Erasure of Generic Types Erasure of Generic Methods Effects of Type Erasure and Bridge Methods Non-Reifiable Types Restrictions on Generics Questions and Exercises Trail: Learning the Java Language Home Page > Learning the Java Language « Previous • Trail • Next » The Java Tutorials have been written for JDK 8. Examples and practices described in this page don't take advantage of improvements introduced in later releases. Lesson: Generics (Updated) In any nontrivial software project, bugs are simply a fact of life. Careful planning, programming, and testing can help reduce their pervasiveness, but somehow, somewhere, they'll always find a way to creep into your code. This becomes especially apparent as new features are introduced and your code base grows in size and complexity. Fortunately, some bugs are easier to detect than others. Compile-time bugs, for example, can be detected early on; you can use the compiler's error messages to figure out what the problem is and fix it, right then and there. Runtime bugs, however, can be much more problematic; they don't always surface immediately, and when they do, it may be at a point in the program that is far removed from the actual cause of the problem. Generics add stability to your code by making more of your bugs detectable at compile time. After completing this lesson, you may want to follow up with the Generics tutorial by Gilad Bracha. « Previous • Trail • Next » About Oracle | Contact Us | Legal Notices | Terms of Use | Your Privacy Rights Copyright © 1995, 2017 Oracle and/or its affiliates. All rights reserved. Previous page: Previous Lesson Next page: Why Use Generics?