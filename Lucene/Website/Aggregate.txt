Aggregate From Wikibooks, open books for an open world < Java Programming The latest reviewed version was checked on 17 September 2017. There are template/file changes awaiting review. Jump to navigation Jump to search Generics Java Programming Aggregate Collection Navigate Aggregate topic: ( v • d • e ) Collection ArrayList Map Comparing Objects Topics: Preface Getting started Language fundamentals Classes and objects Aggregate Exceptions Concurrent Programming Javadoc & Annotations Designing user interfaces Advanced topics In the previous chapters, we have discovered the array. An array stores a group of primitive types. To group objects, or to reference a group of objects, we can use Java aggregate classes. There are two main interfaces, those are java.util.Collection and java.util.Map . Implementations for those interfaces are not interchangeable. Collection[edit] The implementations of java.util.Collection interface are used for grouping simple java objects. Example We can group together all patients in a Hospital to a "patient" collection. Map[edit] The implementations of java.util.Map interface are used to represent mapping between "key" and "value" objects. A Map represents a group of "key" objects, where each "key" object is mapped to a "value" object. Example For each patient, there is one and only one main nurse assigned to. That association can be represented by a "patient-nurse" Map. Choice[edit] A collection is better when you have to access all the items at once. A map is better when you have to randomly access an item regularly. Before selecting a particular collection implementation, ask the following question: Can my collection contain the same elements, i.e. are duplicates allowed? Can my collection contain the null element? Should the collection maintain the order of the elements? Is the order important in any way? How do you want to access an element? By index, key or just with an iterator? Does the collection need to be synchronized? From a performance perspective, which one needs to be faster, updates or reads? From a usage perspective, which operation will be more frequent, updates or reads? Once you know your needs, you can select an existing implementation. But first decide if you need a Collection, or a Map. Note that the above associations are explicit. The objects them-self do not have any knowledge/information about that they are part in an association. But creating explicit associations between simple java objects is the main idea about using the aggregate/collection classes. Generics Java Programming Aggregate Collection Retrieved from "https://en.wikibooks.org/w/index.php?title=Java_Programming/Aggregate&oldid=3295163" Category: Book:Java Programming Navigation menu Personal tools Not logged in Discussion for this IP address Contributions Create account Log in Namespaces Book Discussion Variants Views Read Latest draft Edit View history More Search Navigation Main Page Help Browse Cookbook Wikijunior Featured books Recent changes Donations Random book Using Wikibooks Community Reading room Community portal Bulletin Board Help out! Policies and guidelines Contact us Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page In other languages Nederlands Add links Sister projects Wikipedia Wikiversity Wiktionary Wikiquote Wikisource Wikinews Wikivoyage Commons Wikidata Print/export Create a collection Download as PDF Printable version This page was last edited on 17 September 2017, at 14:39. Text is available under the Creative Commons Attribution-ShareAlike License.; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Privacy policy About Wikibooks Disclaimers Developers Cookie statement Mobile view