Remote Method Invocation From Wikibooks, open books for an open world < Java Programming The latest reviewed version was checked on 17 September 2017. There are template/file changes awaiting review. Jump to navigation Jump to search Client Server Java Programming Remote Method Invocation EJB Navigate Concurrent Programming topic: ( v • d • e ) Threads and Runnables Basic Synchronization Client Server Programming Remote Method Invocation (RMI) Enterprise JavaBean Programming (EJB) Java Spaces Programming (Jini) Java's Remote Method Invocation (commonly referred to as RMI) is used for client and server models. RMI is the object oriented equivalent to RPC (Remote procedure call). The Java Remote Method Invocation (RMI) system allows an object running in one Java Virtual Machine (VM) to invoke methods of an object running in another Java VM. RMI provides for remote communication between programs written in the Java programming language. RMI is only defined for use with the Java platform. If you need to call methods between different language environments, use CORBA. With CORBA a Java client can call a C++ server and/or a C++ client can call a Java server. With RMI that can not be done. STUB and SKELETON[edit] The remote method invocation goes through a STUB on the client side and a so called SKELETON on the server side. CLIENT --> STUB --> ... Network ... --> SKELETON --> REMOTE OBJECT
 Prior to Java 1.2 the skeleton had to be explicitly generated with the rmic tool. Since 1.2 a dynamic skeleton is used, which employs the features of Java Reflection to do its work. rmiregistry[edit] Remote objects can be listed in the RMI Registry. Clients can get a reference to the remote object by querying the Registry. After that, the client can call methods on the remote objects. (Remote object references can also be acquired by calling other remote methods. The Registry is really a 'bootstrap' that solves the problem of where to get the initial remote reference from.) The RMI Registry can either be started within the server JVM, via the LocateRegistry.createRegistry() API, or a separate process called rmiregistry that has to be started before remote objects can be added to it, e.g. by the command line in Unix: rmiregistry on Unix rmiregistry <port> &
 or under Windows: rmiregistry on Windows start rmiregistry <port>
 If port is not specified the default 1099 is used. The client will need to connect to this port to access the Registry. The Registry can also be started from a program by calling the following code: Code section 1: rmiregistry starting import java.rmi.registry.LocateRegistry;
...
Registry reg = LocateRegistry.createRegistry(iPort);
 Objects passed in as parameters to the remote objects's methods will be passed by value. If the remote object changes the passed-in object values, it won't be reflected on the client side, this is opposite what happens when a local object is called. Objects that used as parameters for remote methods invocation must implement the java.io.Serializable interface, as they are going to be serialized when passed through the network, and a new object will be created on the other side. However, exported remote objects passed as parameters are passed by remote reference. rmic tool[edit] To do: Complete this section. RMI Remote object[edit] The remote object has to either extend the java.rmi.server.UnicastRemoteObject object, or be explicitly exported by calling the java.rmi.server.UnicastRemoteObject.exportObject() method. RMI clients[edit] Here is an example of RMI client: Code listing 7.10: HelloClient.java  1 import java.rmi.registry.LocateRegistry;
 2 import java.rmi.registry.Registry;
 3 
 4 public class HelloClient{
 5 
 6     private HelloClient() {}
 7 
 8     public static void main(String[] args) {
 9         String host = (args.length < 1) ? null : args[0];
10         try {
11             Registry registry = LocateRegistry.getRegistry(host);
12             Hello stub = (Hello) registry.lookup("Hello");
13             String response = stub.sayHello();
14             System.out.println("response: " + response);
15         } catch (Exception e) {
16             System.err.println("Client exception: " + e.toString());
17             e.printStackTrace();
18         }
19     }
20 }
 To do: Add some exercises like the ones in Variables Client Server Java Programming Remote Method Invocation EJB Retrieved from "https://en.wikibooks.org/w/index.php?title=Java_Programming/Remote_Method_Invocation&oldid=3295250" Category: Book:Java Programming Navigation menu Personal tools Not logged in Discussion for this IP address Contributions Create account Log in Namespaces Book Discussion Variants Views Read Latest draft Edit View history More Search Navigation Main Page Help Browse Cookbook Wikijunior Featured books Recent changes Donations Random book Using Wikibooks Community Reading room Community portal Bulletin Board Help out! Policies and guidelines Contact us Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page In other languages Add links Sister projects Wikipedia Wikiversity Wiktionary Wikiquote Wikisource Wikinews Wikivoyage Commons Wikidata Print/export Create a collection Download as PDF Printable version This page was last edited on 17 September 2017, at 14:43. Text is available under the Creative Commons Attribution-ShareAlike License.; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Privacy policy About Wikibooks Disclaimers Developers Cookie statement Mobile view